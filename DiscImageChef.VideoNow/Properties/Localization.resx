<?xml version="1.0" encoding="utf-8" ?>
<!--
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format
		that is mostly human readable. The generation and parsing of the
		various data types are done through the TypeConverter classes
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple
		name/value pairs.

		Each data row contains a name, and value. The row also contains a
		type or mimetype. Type corresponds to a .NET class that support
		text/value conversion through the TypeConverter architecture.
		Classes that don't support this are serialized and stored with the
		mimetype set.

		The mimetype is used for serialized objects, and tells the
		ResXResourceReader how to depersist the object. This is currently not
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format
		that the ResXResourceWriter will generate, however the reader can
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->

<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true"></xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Usage" xml:space="preserve">
    <value>Usage: Aaru.VideoNow dump.raw</value>
  </data>
  <data name="FileDoesNotExist" xml:space="preserve">
    <value>Specified file does not exist.</value>
  </data>
  <data name="FileCannotBeOpened" xml:space="preserve">
    <value>Could not open specified file.</value>
  </data>
  <data name="FileIsTooBig" xml:space="preserve">
    <value>File is too big, not continuing.</value>
  </data>
  <data name="FileName" xml:space="preserve">
    <value>File: {0}</value>
  </data>
  <data name="SearchingFirstFrame" xml:space="preserve">
    <value>Searching for first frame....</value>
  </data>
  <data name="NoFrameFound" xml:space="preserve">
    <value>Could not find any frame!</value>
  </data>
  <data name="FirstFrameFoundAt" xml:space="preserve">
    <value>First frame found at {0}</value>
  </data>
  <data name="FirstFrameIsAtSectorBoundary" xml:space="preserve">
    <value>First frame is at a sector boundary</value>
  </data>
  <data name="FirstFrameIsNotAtSectorBoundary" xml:space="preserve">
    <value>First frame is not at a sector boundary</value>
  </data>
  <data name="ExtractingAudio" xml:space="preserve">
    <value>Extracting audio {0}        </value>
  </data>
  <data name="LookingForMoreFrames" xml:space="preserve">
    <value>Looking for more frames {0}</value>
  </data>
  <data name="FrameAndNextAreNotAligned" xml:space="preserve">
    <value>Frame {0} and the next one are not aligned...</value>
  </data>
  <data name="FrameFoundAtPosition" xml:space="preserve">
    <value>Frame {1} found at {0}, {2} bytes apart</value>
  </data>
  <data name="FrameIsAtSectorBoundary" xml:space="preserve">
    <value>Frame {0} is at a sector boundary</value>
  </data>
  <data name="FrameIsNotAtSectorBoundary" xml:space="preserve">
    <value>Frame {0} is not at a sector boundary</value>
  </data>
  <data name="FramesFound" xml:space="preserve">
    <value>Found {0} frames</value>
  </data>
  <data name="ExtractingVideo" xml:space="preserve">
    <value>Extracting video {0}        </value>
  </data>
</root>